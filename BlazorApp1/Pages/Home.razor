@page "/"
@using System.Reflection
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using BlazorApp1.Models.Invoice
@using BlazorApp1.Models.Products
@using BlazorApp1.Data
@using Telerik.FontIcons
@using Telerik.Blazor.Components.Editor
@* @using MudBlazor *@

@using System.Globalization

@inject IDataService _dataService
<div style="height: 80vh">

    

    <TelerikGrid Data="@GridData" Height="100%" @bind-PageSize="@PageSize" EditMode="@GridEditMode.Inline" FilterMode="@GridFilterMode.FilterRow"
                 @bind-Page="@CurrentPage" Pageable="true" Sortable="true" Resizable="true" Reorderable="true" SelectionMode="GridSelectionMode.Multiple" 
                 OnUpdate="@UpdateItem" OnDelete="@DeleteItem" OnCreate="@CreateItem" Navigable="true" class="k-rtl">
        <GridToolBarTemplate>
            <GridCommandButton Command="Add" Icon="@FontIcon.Plus">Add Invoice</GridCommandButton>
            <GridCommandButton Command="ExcelExport" Icon="@FontIcon.FileExcel">Export to Excel</GridCommandButton>
            <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" />Export All Pages</label>
        </GridToolBarTemplate>

        <GridExport>
            <GridExcelExport FileName="telerik-grid-export" AllPages="@ExportAllPages" />
        </GridExport>

        <GridSettings>
            <GridPagerSettings InputType="PagerInputType.Buttons" PageSizes="@PageSizes" ButtonCount="5" />
        </GridSettings>

        <GridColumns>
            <GridCheckboxColumn ShowColumnMenu="true" Lockable="false" />
            <GridColumn Field="@nameof(Invoice.Product)" Title="Product">
                <EditorTemplate>
                    <TelerikComboBox Data="@Products"
                                     @bind-Value="@selectedProductId"
                                     TextField="Name"
                                     ValueField="Id"
                                     OnChange="OnProductChanged" ClearButton="true" />
                </EditorTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(Invoice.Unit)" Title="Unit">
                <EditorTemplate>
                    <TelerikComboBox Data="@FilteredUnits" @bind-Value="(context as Invoice).UnitId" TextField="Name" ValueField="Id" ClearButton="true" />
                </EditorTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(Invoice.Quantity)" Title="Quantity">
                <EditorTemplate>
                    <TelerikNumericTextBox @bind-Value="(context as Invoice).Quantity" />
                </EditorTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(Invoice.Date)" Title="Date">
               <EditorTemplate>
                    <MudDatePicker @bind-Date="_date" Culture="@GetArabicCulture()" TitleDateFormat="dddd, dd MMMM" />
                </EditorTemplate>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>
</div>
@code{
    private DateTime? _date = new DateTime(2024, 12, 02);
    public CultureInfo GetPersianCulture()
    {
        var culture = new CultureInfo("fa-IR");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { "ی", "د", "س", "چ", "پ", "ج", "ش" };
        formatInfo.DayNames = new[] { "یکشنبه", "دوشنبه", "سه شنبه", "چهار شنبه", "پنجشنبه", "جمعه", "شنبه" };
        var monthNames = new[]
        {
            "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن",
            "اسفند",
            "",
        };
        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = "ق.ظ";
        formatInfo.PMDesignator = "ب.ظ";
        formatInfo.ShortDatePattern = "yyyy/MM/dd";
        formatInfo.LongDatePattern = "dddd, dd MMMM,yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        System.Globalization.Calendar cal = new PersianCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        FieldInfo info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = "/";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }

    public CultureInfo GetArabicCulture()
    {
        var culture = new CultureInfo("ar-SA");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;

        // نام روزها
        formatInfo.AbbreviatedDayNames = new[] { "أ", "ث", "ر", "خ", "ج", "س", "ح" };
        formatInfo.DayNames = new[] { "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت" };

        // نام ماه‌ها
        var monthNames = new[]
        {
        "محرم", "صفر", "ربيع الأول", "ربيع الآخر", "جمادى الأولى", "جمادى الآخرة",
        "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""
    };

        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;

        formatInfo.AMDesignator = "ص";
        formatInfo.PMDesignator = "م";
        formatInfo.ShortDatePattern = "yyyy/MM/dd";
        formatInfo.LongDatePattern = "dddd، dd MMMM، yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;

        // استفاده از تقویم هجری
        var cal = new HijriCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);

        FieldInfo info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);

        culture.NumberFormat.NumberDecimalSeparator = ".";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;

        return culture;
    }

}
