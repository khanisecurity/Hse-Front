@using System.Globalization
@inherits AppComponentBase

<div class="dropdown ms-1 topbar-head-dropdown header-item">
    <button type="button" class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle"
    data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <img id="header-lang-img" src="@SelectedLanguage.FlagUrl" alt="Header Language" height="20" class="rounded">
    </button>
    <div class="dropdown-menu dropdown-menu-end">
        @foreach (var language in Languages)
        {
            <a class="dropdown-item notify-item language py-2" data-lang="@language.LanguageName" @onclick="() => ChangeLanguage(language.Culture)">
                <img src="@language.FlagUrl" alt="@language.Name" class="me-2 rounded" height="18">
                <span class="align-middle">@language.Name</span>
            </a>
        }
    </div>
</div>

@code {
    private record LanguageT(string Culture,string LanguageName, string Name, string FlagUrl);
    private List<LanguageT> Languages { get; set; } = new()
    {
        new LanguageT("en-US","en", "English", "/images/flags/us.svg"),
        new LanguageT("es-ES","es", "Spanish", "/images/flags/spain.svg"),
        new LanguageT("de-DE","de", "German", "/images/flags/germany.svg"),
        new LanguageT("it-IT","it", "Italian", "/images/flags/italy.svg"),
        new LanguageT("ru-RU","ru", "Russian", "/images/flags/russia.svg"),
        new LanguageT("zh-CN","zh", "Chinese", "/images/flags/china.svg"),
        new LanguageT("fr-FR","fr", "French", "/images/flags/french.svg"),
        new LanguageT("ar-SA","ar", "Arabic", "/images/flags/ae.svg"),
        new LanguageT("fa-IR","fa", "Farsi", "/images/flags/ir.svg"),
    };

    private LanguageT SelectedLanguage { get; set; } = new("fa-IR","fa", "Farsi", "/images/flags/ir.svg");

    private CultureInfo? SelectedCulture;
    protected override async Task OnInitAsync()
    {

        await Task.Run(() =>
        {
            Console.WriteLine(CultureInfo.CurrentCulture);
            SelectedCulture = CultureInfo.CurrentCulture;
            SelectedLanguage = Languages.Where(x => x.Culture == SelectedCulture.ToString()).First();
        });

    }

    private async Task ChangeLanguage(string culture)
    {
        SelectedLanguage = Languages.Where(x => x.Culture == culture).First();
        SelectedCulture = CultureInfo.GetCultureInfo((Languages.FirstOrDefault(l => l.Culture == culture) ?? SelectedLanguage).Culture);
        await StorageService.SetItem("appCulture", culture, persistent: true);
        CultureManageer.SetCurrentCulture(SelectedCulture!.ToString());
        
        
        // the Cookie service needs rework!



        // if (AppPlatform.IsBlazorHybrid)
        // {
        // }
        // else
        // {
        //     await cookieService.SetCookie(new()
        //         {
        //             Name = ".AspNetCore.Culture",
        //             Value = Uri.EscapeDataString($"c={SelectedCulture}|uic={SelectedCulture}"),
        //             MaxAge = 30 * 24 * 3600,
        //             Secure = AppEnvironment.IsDev() is false
        //         });
        // }
        
    }
}
